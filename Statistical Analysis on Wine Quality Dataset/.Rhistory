slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
slr_rmse <- sqrt(mean(slr_residuals^2))
print(paste("SLR RMSE: ", slr_rmse))
print(paste("SLR RMSE: ", slr_rmse))
print(paste("MLR RMSE: ", mlr_rmse))
ggplot(data = data.frame(Fitted = slr_predictions, Residuals = slr_residuals),
aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "SLR: Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals") +
theme_minimal()
ggplot(data = data.frame(Fitted = mlr_predictions, Residuals = mlr_residuals),
aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "MLR: Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals") +
theme_minimal()
anyDuplicated(wine_data)
anyDuplicated(wine_data)
anyDuplicated(wine_data)
wine_data <- wine_data[!duplicated(wine_data), ]
anyDuplicated(wine_data)
head(wine_data)
tail(wine_data)
str(wine_data)
attributes(wine_data)
dim(wine_data)
names(wine_data)
sum(is.na(wine_data))
anyDuplicated(wine_data)
wine_data <- wine_data[!duplicated(wine_data), ]
anyDuplicated(wine_data)
anyDuplicated(wine_data)
wine_data <- rbind(red_wine, white_wine)
head(wine_data)
tail(wine_data)
str(wine_data)
attributes(wine_data)
dim(wine_data)
names(wine_data)
sum(is.na(wine_data))
anyDuplicated(wine_data)
wine_data <- wine_data[!duplicated(wine_data), ]
anyDuplicated(wine_data)
summary(wine_data)
wine_data %>%
group_by(type) %>%
summarise(across(everything(), ~mean(.), .names = "{.col}_mean"))
# Bar plot of quality score distribution by wine type
ggplot(wine_data, aes(x = quality, fill = type)) +
geom_bar(position = "dodge") +
labs(title = "Quality Score Distribution by Wine Type", x = "Quality Score", y = "Count")
# Scatter plot of Alcohol vs Quality
ggplot(wine_selected, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
ggplot(wine_selected, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
# Boxplot for Residual Sugar vs Quality
ggplot(wine_data, aes(x = factor(quality), y = residual.sugar)) +
geom_boxplot() +
labs(title = "Residual Sugar by Quality", x = "Quality", y = "Residual Sugar")
# Boxplot for alcohol by wine type
ggplot(wine_data, aes(x = type, y = alcohol, fill = type)) +
geom_boxplot() +
labs(title = "Alcohol Content by Wine Type", x = "Wine Type", y = "Alcohol (%)")
# Histogram of pH values
ggplot(wine_data, aes(x = pH, fill = type)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "pH Distribution by Wine Type", x = "pH", y = "Count")
# Boxplot for Residual Sugar vs Quality
ggplot(wine_data, aes(x = factor(quality), y = residual.sugar)) +
geom_boxplot() +
labs(title = "Residual Sugar by Quality", x = "Quality", y = "Residual Sugar")
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
# Boxplot for alcohol by wine type
ggplot(wine_data, aes(x = type, y = alcohol, fill = type)) +
geom_boxplot() +
labs(title = "Alcohol Content by Wine Type", x = "Wine Type", y = "Alcohol (%)")
# Histogram of pH values
ggplot(wine_data, aes(x = pH, fill = type)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "pH Distribution by Wine Type", x = "pH", y = "Count")
numeric_data <- wine_data %>% select(-type)
correlation_matrix <- cor(numeric_data)
correlations <- cor(wine_data[,-c(12, 13)]) # Remove non-numeric columns
numeric_data <- wine_data %>% select(-type)
correlation_matrix <- cor(numeric_data)
correlations <- cor(wine_data[,-c(12, 13)]) # Remove non-numeric columns
print(correlations)
corrplot(correlations, method = "color")
corrplot(correlation_matrix, method = "color", type = "upper", tl.cex = 0.8, title = "Correlation Matrix")
# Violin plot for residual sugar by wine type
ggplot(wine_data, aes(x = type, y = residual.sugar, fill = type)) +
geom_violin(trim = TRUE) +
labs(title = "Residual Sugar Distribution by Wine Type", x = "Wine Type", y = "Residual Sugar")
# Select specific columns for detailed analysis
wine_selected <- wine_data %>% select(alcohol, quality, residual.sugar)
# Quality score distribution by wine type
ggplot(wine_data, aes(x = quality, fill = type)) +
geom_histogram(bins = 10, position = "dodge") +
labs(title = "Quality Score Distribution by Wine Type", x = "Quality Score", y = "Count")
# Total Sulfur Dioxide vs Quality by Wine Type
ggplot(wine_data, aes(x = volatile.acidity, y = quality, color = type)) +
geom_point(alpha = 0.5) +
facet_wrap(~ type) +
labs(title = "Total Sulfur Dioxide vs Quality by Wine Type", x = "total sulfur dioxide", y = "Quality Score")
# Quality score distribution by wine type
ggplot(wine_data, aes(x = quality, fill = type)) +
geom_histogram(bins = 10, position = "dodge") +
labs(title = "Quality Score Distribution by Wine Type", x = "Quality Score", y = "Count")
# Total Sulfur Dioxide vs Quality by Wine Type
ggplot(wine_data, aes(x = volatile.acidity, y = quality, color = type)) +
geom_point(alpha = 0.5) +
facet_wrap(~ type) +
labs(title = "Total Sulfur Dioxide vs Quality by Wine Type", x = "total sulfur dioxide", y = "Quality Score")
spearman_correlation <- cor(selected_columns, method = "spearman")
print(spearman_correlation)
corrplot(spearman_correlation, method = "color", type = "upper", tl.cex = 0.8, title = "Spearman Correlation Matrix")
selected_columns <- wine_data[, c("alcohol", "sulphates", "pH", "citric.acid", "quality")]
correlations <- cor(selected_columns, method = "pearson")
print(correlations)
skewness_values <- sapply(wine_data[, c("alcohol", "sulphates", "pH", "citric.acid")], skewness)
print(skewness_values)
# Calculate skewness for original variables
skewness_values <- sapply(wine_data[, c("alcohol", "sulphates", "pH", "citric.acid")], skewness)
print(skewness_values)
# Applying  transformation for Sulphate
wine_data$sqrt_sulphates <- sqrt(wine_data$sulphates)
transformed_skewness <- skewness(wine_data$sqrt_sulphates)
all_skewness_values <- c(skewness_values, sqrt_sulphates_transformed = transformed_skewness)
print(all_skewness_values)
# Histogram for sulphates after transformation
ggplot(wine_data, aes(x = sqrt_sulphates)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Log-Transformed Sulphates Distribution", x = "Log(Sulphates)", y = "Frequency")
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
print(all_skewness_values)
print(skewness_values)
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
wine_data$quality_binary <- ifelse(wine_data$quality > 6, "High", "Low")
# Convert to factor for logistic regression
wine_data$quality_binary <- as.factor(wine_data$quality_binary)
log_reg_model <- glm(quality_binary ~ alcohol + pH + sulphates + citric.acid + volatile.acidity,
data = wine_data,
family = binomial)
# Model Summary
summary(log_reg_model)
summary(log_reg_model)
# Get predicted probabilities
log_reg_predictions <- predict(log_reg_model, wine_data, type = "response")
# Convert probabilities to binary outcomes
log_reg_predicted_class <- ifelse(log_reg_predictions > 0.5, "High", "Low")
log_loss <- -mean(wine_data$quality_binary * log(log_reg_predictions) +
(1 - wine_data$quality_binary) * log(1 - log_reg_predictions))
print(paste("Log-Loss for Logistic Regression: ", log_loss))
# Accuracy for Logistic Regression
log_reg_accuracy <- mean(log_reg_predicted_class == wine_data$quality_binary)
print(paste("Accuracy for Logistic Regression: ", log_reg_accuracy))
print(paste("MLR RMSE: ", mlr_rmse))
print(paste("Logistic Regression Log-Loss: ", log_loss))
print(paste("Logistic Regression Accuracy: ", log_reg_accuracy))
vif(mlr_model)
slr_model <- lm(quality ~ alcohol, data = wine_data)
# Model Summary
summary(slr_model)
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
shapiro.test(residuals(mlr_model))
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
vif(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
shapiro.test(residuals(mlr_model))
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
vif(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Plotting the SLR Model
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Alcohol vs Quality (Simple Linear Regression)", x = "Alcohol", y = "Quality")
vif(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
# Convert quality into categorical variable (low, medium, high)
wine_data$quality_cat <- cut(wine_data$quality, breaks = c(0, 4, 7, 10), labels = c("Low", "Medium", "High"))
chi_sq_result <- chisq.test(table(wine_data$quality_cat, wine_data$type))
print(chi_sq_result)
# Mann-Whitney U test (Wilcoxon rank-sum test) comparing quality between Red and White wines
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Scatter plot for Simple Linear Regression (SLR)
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +  # Scatter plot of points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a regression line
labs(title = "Alcohol vs Quality (Simple Linear Regression)",
x = "Alcohol", y = "Quality")
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
# Install required packages
install.packages("ggplot2")
install.packages("dplyr")
install.packages("corrplot")
install.packages("e1071")
install.packages("car")
# Load libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(e1071)
library(car)
# Read Data
red_wine <- read.csv("winequality-red.csv")
white_wine <- read.csv("winequality-white.csv")
# Add a 'type' column to each data set
red_wine$type <- "Red Wine"
white_wine$type <- "White Wine"
# Combine data sets
wine_data <- rbind(red_wine, white_wine)
########## EDA ##################################
# Inspect Wine Data set
head(wine_data)
tail(wine_data)
str(wine_data)
attributes(wine_data)
dim(wine_data)
names(wine_data)
sum(is.na(wine_data))
anyDuplicated(wine_data)
wine_data <- wine_data[!duplicated(wine_data), ]
anyDuplicated(wine_data)
############### Descriptive Statistics ################
summary(wine_data)
# Summary statistics by wine type (Red/White)
wine_data %>%
group_by(type) %>%
summarise(across(everything(), ~mean(.), .names = "{.col}_mean"))
################# Visualization ###############################
# Scatter plot of Alcohol vs Quality
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
# Fit Simple Linear Regression model for Alcohol
slr_model <- lm(quality ~ alcohol, data = wine_data)
# Model Summary
summary(slr_model)
# Plotting the SLR Model
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Alcohol vs Quality (Simple Linear Regression)", x = "Alcohol", y = "Quality")
# Fit Multiple Linear Regression Model
mlr_model <- lm(quality ~ alcohol + sqrt(sulphates) + pH + citric.acid, data = wine_data)
summary(mlr_model)
# Residuals vs Fitted Values for MLR
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
################### Evaluate Assumptions ######################
# Homoscedasticity for MLR
# Residuals vs Fitted Values Plot (to check constant variance)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Normality of Residuals for SLR
# Q-Q Plot for SLR
qqnorm(slr_model$residuals)
qqline(slr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
# Residuals vs Fitted Values for SLR
plot(slr_model$fitted.values, slr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
#################### Hypothesis Test #######################
# Perform an independent t-test comparing the quality of red wine vs white wine
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Mann-Whitney U test (Wilcoxon rank-sum test) comparing quality between Red and White wines
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
# Convert quality into categorical variable (low, medium, high)
wine_data$quality_cat <- cut(wine_data$quality, breaks = c(0, 4, 7, 10), labels = c("Low", "Medium", "High"))
chi_sq_result <- chisq.test(table(wine_data$quality_cat, wine_data$type))
print(chi_sq_result)
############################## Evaluation ##################
# Calculate RMSE for MLR
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
mlr_rmse <- sqrt(mean(mlr_residuals^2))
print(paste("MLR RMSE: ", mlr_rmse))
# Calculate RMSE for SLR
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
slr_rmse <- sqrt(mean(slr_residuals^2))
print(paste("SLR RMSE: ", slr_rmse))
summary(mlr_model)
summary(slr_model)
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
mlr_rmse <- sqrt(mean(mlr_residuals^2))
print(paste("MLR RMSE: ", mlr_rmse))
# Calculate RMSE for SLR
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
slr_rmse <- sqrt(mean(slr_residuals^2))
print(paste("SLR RMSE: ", slr_rmse))
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
# Calculate residuals for SLR model
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
# Plot residuals for MLR model
ggplot(data = data.frame(Fitted_Values = mlr_predictions, Residuals = mlr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'blue', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "MLR Model Residuals", x = "Fitted Values (MLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for SLR model
ggplot(data = data.frame(Fitted_Values = slr_predictions, Residuals = slr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'green', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "SLR Model Residuals", x = "Fitted Values (SLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for MLR model
ggplot(data = data.frame(Fitted_Values = mlr_predictions, Residuals = mlr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'blue', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "MLR Model Residuals", x = "Fitted Values (MLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for SLR model
ggplot(data = data.frame(Fitted_Values = slr_predictions, Residuals = slr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'green', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "SLR Model Residuals", x = "Fitted Values (SLR)", y = "Residuals") +
theme_minimal()
# Load libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(e1071)
library(car)
# Read Data
red_wine <- read.csv("winequality-red.csv")
white_wine <- read.csv("winequality-white.csv")
# Add a 'type' column to each data set
red_wine$type <- "Red Wine"
white_wine$type <- "White Wine"
# Combine data sets
wine_data <- rbind(red_wine, white_wine)
########## EDA ##################################
# Inspect Wine Data set
head(wine_data)
tail(wine_data)
str(wine_data)
attributes(wine_data)
dim(wine_data)
names(wine_data)
sum(is.na(wine_data))
anyDuplicated(wine_data)
wine_data <- wine_data[!duplicated(wine_data), ]
anyDuplicated(wine_data)
############### Descriptive Statistics ################
summary(wine_data)
# Summary statistics by wine type (Red/White)
wine_data %>%
group_by(type) %>%
summarise(across(everything(), ~mean(.), .names = "{.col}_mean"))
################# Visualization ###############################
# Scatter plot of Alcohol vs Quality
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
# Fit Simple Linear Regression model for Alcohol
slr_model <- lm(quality ~ alcohol, data = wine_data)
# Model Summary
summary(slr_model)
# Plotting the SLR Model
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Alcohol vs Quality (Simple Linear Regression)", x = "Alcohol", y = "Quality")
# Fit Multiple Linear Regression Model
mlr_model <- lm(quality ~ alcohol + sqrt(sulphates) + pH + citric.acid, data = wine_data)
summary(mlr_model)
# Residuals vs Fitted Values for MLR
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
################### Evaluate Assumptions ######################
# Homoscedasticity for MLR
# Residuals vs Fitted Values Plot (to check constant variance)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Normality of Residuals for SLR
# Q-Q Plot for SLR
qqnorm(slr_model$residuals)
qqline(slr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
# Residuals vs Fitted Values for SLR
plot(slr_model$fitted.values, slr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
#################### Hypothesis Test #######################
# Perform an independent t-test comparing the quality of red wine vs white wine
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Mann-Whitney U test (Wilcoxon rank-sum test) comparing quality between Red and White wines
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
# Convert quality into categorical variable (low, medium, high)
wine_data$quality_cat <- cut(wine_data$quality, breaks = c(0, 4, 7, 10), labels = c("Low", "Medium", "High"))
chi_sq_result <- chisq.test(table(wine_data$quality_cat, wine_data$type))
print(chi_sq_result)
############################## Evaluation ##################
# Calculate RMSE for MLR
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
mlr_rmse <- sqrt(mean(mlr_residuals^2))
print(paste("MLR RMSE: ", mlr_rmse))
# Calculate RMSE for SLR
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
slr_rmse <- sqrt(mean(slr_residuals^2))
print(paste("SLR RMSE: ", slr_rmse))
# Plotting
# Calculate residuals for MLR model
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
# Calculate residuals for SLR model
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
# Plot residuals for MLR model
ggplot(data = data.frame(Fitted_Values = mlr_predictions, Residuals = mlr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'blue', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "MLR Model Residuals", x = "Fitted Values (MLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for SLR model
ggplot(data = data.frame(Fitted_Values = slr_predictions, Residuals = slr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'green', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "SLR Model Residuals", x = "Fitted Values (SLR)", y = "Residuals") +
theme_minimal()

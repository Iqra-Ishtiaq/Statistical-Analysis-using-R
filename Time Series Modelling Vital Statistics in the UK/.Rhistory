# Applying  transformation for Sulphate
wine_data$sqrt_sulphates <- sqrt(wine_data$sulphates)
transformed_skewness <- skewness(wine_data$sqrt_sulphates)
all_skewness_values <- c(skewness_values, sqrt_sulphates_transformed = transformed_skewness)
print(all_skewness_values)
# Histogram for sulphates after transformation
ggplot(wine_data, aes(x = sqrt_sulphates)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
labs(title = "Log-Transformed Sulphates Distribution", x = "Log(Sulphates)", y = "Frequency")
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
print(all_skewness_values)
print(skewness_values)
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
wine_data$quality_binary <- ifelse(wine_data$quality > 6, "High", "Low")
# Convert to factor for logistic regression
wine_data$quality_binary <- as.factor(wine_data$quality_binary)
log_reg_model <- glm(quality_binary ~ alcohol + pH + sulphates + citric.acid + volatile.acidity,
data = wine_data,
family = binomial)
# Model Summary
summary(log_reg_model)
summary(log_reg_model)
# Get predicted probabilities
log_reg_predictions <- predict(log_reg_model, wine_data, type = "response")
# Convert probabilities to binary outcomes
log_reg_predicted_class <- ifelse(log_reg_predictions > 0.5, "High", "Low")
log_loss <- -mean(wine_data$quality_binary * log(log_reg_predictions) +
(1 - wine_data$quality_binary) * log(1 - log_reg_predictions))
print(paste("Log-Loss for Logistic Regression: ", log_loss))
# Accuracy for Logistic Regression
log_reg_accuracy <- mean(log_reg_predicted_class == wine_data$quality_binary)
print(paste("Accuracy for Logistic Regression: ", log_reg_accuracy))
print(paste("MLR RMSE: ", mlr_rmse))
print(paste("Logistic Regression Log-Loss: ", log_loss))
print(paste("Logistic Regression Accuracy: ", log_reg_accuracy))
vif(mlr_model)
slr_model <- lm(quality ~ alcohol, data = wine_data)
# Model Summary
summary(slr_model)
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
shapiro.test(residuals(mlr_model))
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
vif(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
shapiro.test(residuals(mlr_model))
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
vif(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Plotting the SLR Model
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Alcohol vs Quality (Simple Linear Regression)", x = "Alcohol", y = "Quality")
vif(mlr_model)
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
mlr_model <- lm(quality ~ alcohol + sqrt_sulphates + pH + citric.acid, data = wine_data)
summary(mlr_model)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
# Convert quality into categorical variable (low, medium, high)
wine_data$quality_cat <- cut(wine_data$quality, breaks = c(0, 4, 7, 10), labels = c("Low", "Medium", "High"))
chi_sq_result <- chisq.test(table(wine_data$quality_cat, wine_data$type))
print(chi_sq_result)
# Mann-Whitney U test (Wilcoxon rank-sum test) comparing quality between Red and White wines
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Scatter plot for Simple Linear Regression (SLR)
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +  # Scatter plot of points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a regression line
labs(title = "Alcohol vs Quality (Simple Linear Regression)",
x = "Alcohol", y = "Quality")
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")
# Install required packages
install.packages("ggplot2")
install.packages("dplyr")
install.packages("corrplot")
install.packages("e1071")
install.packages("car")
# Load libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(e1071)
library(car)
# Read Data
red_wine <- read.csv("winequality-red.csv")
white_wine <- read.csv("winequality-white.csv")
# Add a 'type' column to each data set
red_wine$type <- "Red Wine"
white_wine$type <- "White Wine"
# Combine data sets
wine_data <- rbind(red_wine, white_wine)
########## EDA ##################################
# Inspect Wine Data set
head(wine_data)
tail(wine_data)
str(wine_data)
attributes(wine_data)
dim(wine_data)
names(wine_data)
sum(is.na(wine_data))
anyDuplicated(wine_data)
wine_data <- wine_data[!duplicated(wine_data), ]
anyDuplicated(wine_data)
############### Descriptive Statistics ################
summary(wine_data)
# Summary statistics by wine type (Red/White)
wine_data %>%
group_by(type) %>%
summarise(across(everything(), ~mean(.), .names = "{.col}_mean"))
################# Visualization ###############################
# Scatter plot of Alcohol vs Quality
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
# Fit Simple Linear Regression model for Alcohol
slr_model <- lm(quality ~ alcohol, data = wine_data)
# Model Summary
summary(slr_model)
# Plotting the SLR Model
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Alcohol vs Quality (Simple Linear Regression)", x = "Alcohol", y = "Quality")
# Fit Multiple Linear Regression Model
mlr_model <- lm(quality ~ alcohol + sqrt(sulphates) + pH + citric.acid, data = wine_data)
summary(mlr_model)
# Residuals vs Fitted Values for MLR
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
################### Evaluate Assumptions ######################
# Homoscedasticity for MLR
# Residuals vs Fitted Values Plot (to check constant variance)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Normality of Residuals for SLR
# Q-Q Plot for SLR
qqnorm(slr_model$residuals)
qqline(slr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
# Residuals vs Fitted Values for SLR
plot(slr_model$fitted.values, slr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
#################### Hypothesis Test #######################
# Perform an independent t-test comparing the quality of red wine vs white wine
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Mann-Whitney U test (Wilcoxon rank-sum test) comparing quality between Red and White wines
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
# Convert quality into categorical variable (low, medium, high)
wine_data$quality_cat <- cut(wine_data$quality, breaks = c(0, 4, 7, 10), labels = c("Low", "Medium", "High"))
chi_sq_result <- chisq.test(table(wine_data$quality_cat, wine_data$type))
print(chi_sq_result)
############################## Evaluation ##################
# Calculate RMSE for MLR
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
mlr_rmse <- sqrt(mean(mlr_residuals^2))
print(paste("MLR RMSE: ", mlr_rmse))
# Calculate RMSE for SLR
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
slr_rmse <- sqrt(mean(slr_residuals^2))
print(paste("SLR RMSE: ", slr_rmse))
summary(mlr_model)
summary(slr_model)
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
mlr_rmse <- sqrt(mean(mlr_residuals^2))
print(paste("MLR RMSE: ", mlr_rmse))
# Calculate RMSE for SLR
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
slr_rmse <- sqrt(mean(slr_residuals^2))
print(paste("SLR RMSE: ", slr_rmse))
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
# Calculate residuals for SLR model
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
# Plot residuals for MLR model
ggplot(data = data.frame(Fitted_Values = mlr_predictions, Residuals = mlr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'blue', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "MLR Model Residuals", x = "Fitted Values (MLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for SLR model
ggplot(data = data.frame(Fitted_Values = slr_predictions, Residuals = slr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'green', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "SLR Model Residuals", x = "Fitted Values (SLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for MLR model
ggplot(data = data.frame(Fitted_Values = mlr_predictions, Residuals = mlr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'blue', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "MLR Model Residuals", x = "Fitted Values (MLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for SLR model
ggplot(data = data.frame(Fitted_Values = slr_predictions, Residuals = slr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'green', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "SLR Model Residuals", x = "Fitted Values (SLR)", y = "Residuals") +
theme_minimal()
# Load libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(e1071)
library(car)
# Read Data
red_wine <- read.csv("winequality-red.csv")
white_wine <- read.csv("winequality-white.csv")
# Add a 'type' column to each data set
red_wine$type <- "Red Wine"
white_wine$type <- "White Wine"
# Combine data sets
wine_data <- rbind(red_wine, white_wine)
########## EDA ##################################
# Inspect Wine Data set
head(wine_data)
tail(wine_data)
str(wine_data)
attributes(wine_data)
dim(wine_data)
names(wine_data)
sum(is.na(wine_data))
anyDuplicated(wine_data)
wine_data <- wine_data[!duplicated(wine_data), ]
anyDuplicated(wine_data)
############### Descriptive Statistics ################
summary(wine_data)
# Summary statistics by wine type (Red/White)
wine_data %>%
group_by(type) %>%
summarise(across(everything(), ~mean(.), .names = "{.col}_mean"))
################# Visualization ###############################
# Scatter plot of Alcohol vs Quality
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Alcohol vs Quality")
# Fit Simple Linear Regression model for Alcohol
slr_model <- lm(quality ~ alcohol, data = wine_data)
# Model Summary
summary(slr_model)
# Plotting the SLR Model
ggplot(wine_data, aes(x = alcohol, y = quality)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Alcohol vs Quality (Simple Linear Regression)", x = "Alcohol", y = "Quality")
# Fit Multiple Linear Regression Model
mlr_model <- lm(quality ~ alcohol + sqrt(sulphates) + pH + citric.acid, data = wine_data)
summary(mlr_model)
# Residuals vs Fitted Values for MLR
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Q-Q Plot for MLR
qqnorm(mlr_model$residuals)
qqline(mlr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
################### Evaluate Assumptions ######################
# Homoscedasticity for MLR
# Residuals vs Fitted Values Plot (to check constant variance)
plot(mlr_model$fitted.values, mlr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")  # Add a red line at zero for reference
# Normality of Residuals for SLR
# Q-Q Plot for SLR
qqnorm(slr_model$residuals)
qqline(slr_model$residuals, col = "red")  # Add a red line to compare with normal distribution
# Residuals vs Fitted Values for SLR
plot(slr_model$fitted.values, slr_model$residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
#################### Hypothesis Test #######################
# Perform an independent t-test comparing the quality of red wine vs white wine
t_test_result <- t.test(quality ~ type, data = wine_data)
print(t_test_result)
ggplot(wine_data, aes(x = type, y = quality, fill = type)) +
geom_boxplot() +
labs(title = "Wine Quality by Type", x = "Wine Type", y = "Quality")
# Mann-Whitney U test (Wilcoxon rank-sum test) comparing quality between Red and White wines
mann_whitney_result <- wilcox.test(quality ~ type, data = wine_data)
print(mann_whitney_result)
# Convert quality into categorical variable (low, medium, high)
wine_data$quality_cat <- cut(wine_data$quality, breaks = c(0, 4, 7, 10), labels = c("Low", "Medium", "High"))
chi_sq_result <- chisq.test(table(wine_data$quality_cat, wine_data$type))
print(chi_sq_result)
############################## Evaluation ##################
# Calculate RMSE for MLR
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
mlr_rmse <- sqrt(mean(mlr_residuals^2))
print(paste("MLR RMSE: ", mlr_rmse))
# Calculate RMSE for SLR
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
slr_rmse <- sqrt(mean(slr_residuals^2))
print(paste("SLR RMSE: ", slr_rmse))
# Plotting
# Calculate residuals for MLR model
mlr_predictions <- predict(mlr_model, wine_data)
mlr_residuals <- wine_data$quality - mlr_predictions
# Calculate residuals for SLR model
slr_predictions <- predict(slr_model, wine_data)
slr_residuals <- wine_data$quality - slr_predictions
# Plot residuals for MLR model
ggplot(data = data.frame(Fitted_Values = mlr_predictions, Residuals = mlr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'blue', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "MLR Model Residuals", x = "Fitted Values (MLR)", y = "Residuals") +
theme_minimal()
# Plot residuals for SLR model
ggplot(data = data.frame(Fitted_Values = slr_predictions, Residuals = slr_residuals), aes(x = Fitted_Values, y = Residuals)) +
geom_point(color = 'green', alpha = 0.5) +
geom_hline(yintercept = 0, color = 'red', linetype = "dashed") +
labs(title = "SLR Model Residuals", x = "Fitted Values (SLR)", y = "Residuals") +
theme_minimal()
setwd("D:/SALFORD - Master Stuff/SEM 1/Assessments/Stats/Ishtiaq_@00754530/Q2")
library(readxl)
library(TTR)
library(forecast)
library(tseries)
# Install and load necessary packages
install.packages("readxl")
install.packages("TTR")
install.packages("ggplot2")
install.packages("forecast")
library(readxl)
library(TTR)
library(forecast)
library(tseries)
### 1- EDA - Exploratory Data Analysis
# 1. Load the data set
death_stats_data <- read_excel("DeathStats.xlsx", skip = 5)
library(readxl)
library(TTR)
library(forecast)
library(tseries)
### 1- EDA - Exploratory Data Analysis
# 1. Load the data set
death_stats_data <- read_excel("DeathStats.xlsx", skip = 5)
setwd("D:/SALFORD - Master Stuff/SEM 1/Assessments/Stats/Ishtiaq_@00754530/Q3")
library(readxl)
library(TTR)
library(forecast)
library(tseries)
### 1- EDA - Exploratory Data Analysis
# 1. Load the data set
death_stats_data <- read_excel("DeathStats.xlsx", skip = 5)
# 2. Drop unnecessary columns
death_stats_data <- death_stats_data[, 1:3]
# 3. Inspect the data set
head(death_stats_data)
summary(death_stats_data)
str(death_stats_data)
# 4. Pre-Processing: Replace missing values with linear interpolation for UK deaths
library(zoo)
UK_death_counts <- death_stats_data$'Number of deaths: United Kingdom'
UK_death_counts <- na.approx(UK_death_counts)
UK_death_counts
# 5. Reading& Plotting: Time Series Data
uk_death_timeseries <- ts(UK_death_counts, start = c(1886),frequency = 12)
england_wales_death_counts <- death_stats_data$'Number of deaths: England and Wales'
england_wales_timeseries <- ts(england_wales_death_counts, start = c(1838),frequency = 12)
plot(uk_death_timeseries, col = "blue", main = "Number of Deaths: United Kingdom", xlab = "Year", ylab = "Deaths")
plot(england_wales_timeseries, col = "red", main = "Number of Deaths: England and Wales", xlab = "Year", ylab = "Deaths")
# Calculate the 3-year Simple Moving Average (SMA)
uk_death_timeseries_SMA3 <- SMA(uk_death_timeseries, n = 3)
england_wales_timeseries_SMA3 <- SMA(england_wales_timeseries, n = 3)
# Plot the original UK deaths time series (blue) and overlay the 3-year SMA (purple)
plot(uk_death_timeseries, main = "UK Deaths with 3-Year Moving Average",
xlab = "Year", ylab = "Number of Deaths", col = "lightblue", type = "l", lwd = 2)
lines(uk_death_timeseries_SMA3, col = "pink", lwd = 2)  # Overlay 3-year SMA
plot(england_wales_timeseries, main = "England & Wales Deaths with 3-Year Moving Average",
xlab = "Year", ylab = "Number of Deaths", col = "pink", type = "l", lwd = 2)
lines(england_wales_timeseries_SMA3, col = "green", lwd = 2)  # Overlay 3-year SMA
#### Decomposition
uk_death_decomposed <- decompose(uk_death_timeseries, type = "additive")
plot(uk_death_decomposed)
england_wales_decomposed <- decompose(england_wales_timeseries, type = "additive")
plot(england_wales_decomposed)
#### Seasonally adjusted data
uk_death_timeseries_seasonally_adjusted <- uk_death_timeseries - uk_death_timeseries_SMA3
plot(uk_death_timeseries_seasonally_adjusted, main = "Seasonally Adjusted Deaths (UK)", col = "green", xlab = "Year", ylab = "Deaths")
england_wales_timeseries_seasonally_adjusted <- england_wales_timeseries - england_wales_timeseries_SMA3
plot(england_wales_timeseries_seasonally_adjusted, main = "Seasonally Adjusted Deaths (England and Wales)", col = "pink", xlab = "Year", ylab = "Deaths")
#### Time Series Modeling
# Stationarity Testing, Perform the Augmented Dickey-Fuller (ADF) test.
adf.test(uk_death_timeseries)
adf.test(england_wales_timeseries)
acf(uk_death_timeseries)
acf(england_wales_timeseries)
pacf(uk_death_timeseries)
pacf(england_wales_timeseries)
# As it's non-stationarity
uk_death_diff <- diff(uk_death_timeseries)
england_wales_diff <- diff(england_wales_timeseries)
# Plot the ACF and PACF to assess autocorrelation.
plot.ts(uk_death_diff, main = "Differenced UK Deaths")
plot.ts(england_wales_diff, main = "Differenced England & Wales Deaths")
# Re-check stationarity of difference series
adf.test(uk_death_diff)
adf.test(england_wales_diff)
### Forecasting
# ARIMA Model
uk_arima_model  <- auto.arima(uk_death_diff)
england_wales_arima_model <- auto.arima(england_wales_diff)
summary(uk_arima_model)
summary(england_wales_arima_model)
# Check residuals
checkresiduals(uk_arima_model)
checkresiduals(england_wales_arima_model)
# Forecast the next 10 years
uk_arima_death_forecast <- forecast(uk_arima_model, h = 10)
england_wales_arima_forecast <- forecast(england_wales_arima_model, h = 10)
plot(uk_arima_death_forecast, main = "ARIMA Forecast: UK Deaths")
plot(england_wales_arima_forecast, main = "ARIMA Forecast: England & Wales Deaths")
# plot a correlogram
acf(uk_death_diff, lag.max = 20, main = "Correlogram of Differenced UK Deaths")
acf(england_wales_diff, lag.max = 20, main = "Correlogram of Differenced England & Wales Deaths")
pacf(uk_death_diff, lag.max = 20, main = "Partial LAg/ACF UK Deaths")
pacf(england_wales_diff, lag.max = 20, main = "Partial ACF/Lag England & Wales Deaths")
# Get the autocorrelation values for UK deaths (up to 20 lags, without plotting)
uk_acf_values <- acf(uk_death_diff, lag.max = 20, plot = FALSE)
england_wales_acf_values <- acf(england_wales_diff, lag.max = 20, plot = FALSE)
uk_acf_values
england_wales_acf_values
mean_forecast_uk <- mean(uk_arima_death_forecast$mean)
mean_forecast_englandwales <- mean(england_wales_arima_model$mean)
print(mean_forecast_uk)
print(mean_forecast_englandwales)
print(uk_acf_values)  # Print autocorrelation values for UK deaths
print(england_wales_acf_values)  # Print autocorrelation values for England & Wales deaths
# Evaluate accuracy for ARIMA forecasts
cat("\nAccuracy for England & Wales ARIMA model:\n")
accuracy(uk_arima_death_forecast)
accuracy(england_wales_arima_model)
#### Holt Winter
# Apply Holt-Winters model for UK deaths
uk_holt_winters <- HoltWinters(uk_death_timeseries, gamma = FALSE)
england_wales_holt_winters <- HoltWinters(england_wales_timeseries, gamma = FALSE)
summary(uk_holt_winters)
summary(england_wales_holt_winters)
# Check residuals for UK ARIMA model
checkresiduals(uk_holt_winters)
checkresiduals(england_wales_holt_winters)
uk_holt_winters_forecast <- forecast(uk_holt_winters, h = 10)
england_wales_holt_winters_forecast <- forecast(england_wales_holt_winters, h = 10)
plot(uk_holt_winters_forecast, main = "Holt-Winters Forecast: UK Deaths")
plot(england_wales_holt_winters_forecast, main = "Holt-Winters Forecast: England & Wales Deaths")
# Evaluate accuracy for Holt-Winters & ARIMA forecasts
accuracy(uk_arima_death_forecast)
accuracy(england_wales_arima_model)
accuracy(uk_holt_winters_forecast)
accuracy(england_wales_holt_winters_forecast)
